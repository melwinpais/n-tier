AWSTemplateFormatVersion: 2010-09-09

Description: >-
  Cloudformation template to create a highly available SSH bastion host
  
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - ParentVPCStack
          - RemoteAccessCIDR
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - KeyPairName
          - BastionInstanceType
          - LogsRetentionInDays
          - NotificationList
      - Label:
          default: Linux Bastion Configuration
        Parameters:
          - BastionTenancy
          - EnableBanner
          - BastionBanner
          - EnableTCPForwarding
          - EnableX11Forwarding

    ParameterLabels:
      BastionTenancy:
        default: Bastion Tenancy
      BastionBanner:
        default: Bastion Banner
      BastionInstanceType:
        default: Bastion Instance Type
      EnableBanner:
        default: Enable Banner
      EnableTCPForwarding:
        default: Enable TCP Forwarding
      EnableX11Forwarding:
        default: Enable X11 Forwarding
      KeyPairName:
        default: Key Pair Name
      RemoteAccessCIDR:
        default: Allowed Bastion External Access CIDR
      AltInitScript:
        default: Custom Bootstrap Script
      OSImageOverride:
        default: AMI override
      NotificationList:
        default: SNS Notification Email

        
Parameters:

#   ParentVPCStack:
#     Description: 'Stack name of parent VPC stack based on VPC-3AZs yaml template. Refer Cloudformation dashboard in AWS Console to get this.'
#     Type: String
  EnvironmentName:
    Type: String
    Default: dod-cnc-sandbox
    Description: "A friendly environment name that will be used for namespacing all cluster resources. Example: staging, qa, or production"

  NotificationList:
    Type: String
    Description: The Email notification list is used to configure a SNS topic for sending cloudwatch alarm notifications
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: provide a valid email address.
    Default: 'john@citizen.com'
    
  LogsRetentionInDays:
    Description: Specify the number of days you want to retain log events
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]    
    
  BastionBanner:
    Default: default
    Description: Banner text to display upon login. Leave at default or provide AWS S3 location for the file containing Banner text.
    Type: String
    ConstraintDescription: URL must begin with s3://
    
  BastionTenancy:
    Description: 'VPC Tenancy in which bastion host will be launched. Options: ''dedicated'' or ''default'''
    Type: String
    Default: default
    AllowedValues:
      - dedicated
      - default
      
  BastionInstanceType:
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
    Default: t2.micro
    Description: Amazon EC2 instance type for the bastion instance. t2 instance types are not supported for dedicated VPC tenancy (option below).
    Type: String
    
  EnableBanner:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: >-
      To include a banner to be displayed when connecting via SSH to the
      bastion, set this parameter to true
    Type: String
    
  EnableTCPForwarding:
    Type: String
    Description: Enable/Disable TCP Forwarding
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
      
  EnableX11Forwarding:
    Type: String
    Description: Enable/Disable X11 Forwarding
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
      
  KeyPairName:
    Description: >-
      Enter a Public/private key pair. If you do not have one in this AWS Region,
      create it before continuing
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: 'dod-bastion'
    
  RemoteAccessCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block in the x.x.x.x/x format for external SSH access to the bastion host
    Type: String
    Default: 54.240.193.129/0
    
    
    
  AltInitScript:
    AllowedPattern: ^http.*|^$
    ConstraintDescription: URL must begin with http
    Description: Optional. Specify custom bootstrap script AWS S3 location to run during bastion host setup
    Default: ''
    Type: String
    
  OSImageOverride:
    Description: Optional. Specify a region specific image to use for the instance
    Type: String
    Default: ''
    
  CidrBlock:
    Description: AZ for Bastion Host
    Type: String
    Default: 10.0.1.0/24
        
Mappings:

  AWSAMIRegionMap:
    ap-northeast-1:
      AMZNLINUXHVM: ami-0318ecd6d05daa212
    ap-northeast-2:
      AMZNLINUXHVM: ami-09391a0ad9f9243b6
    ap-south-1:
      AMZNLINUXHVM: ami-04b2519c83e2a7ea5
    ap-southeast-1:
      AMZNLINUXHVM: ami-0dff4318d85149d5d
    ap-southeast-2:
      AMZNLINUXHVM: ami-050e1ec030abb8dde
    ca-central-1:
      AMZNLINUXHVM: ami-021321e9bc16d5186
    eu-central-1:
      AMZNLINUXHVM: ami-03ab4e8f1d88ce614
    me-south-1:
      AMZNLINUXHVM: ami-02a841b5a224a1caf
    ap-east-1:
      AMZNLINUXHVM: ami-c86e28b9
    eu-north-1:
      AMZNLINUXHVM: ami-0c5254b956817b326
    eu-west-1:
      AMZNLINUXHVM: ami-00890f614e48ce866
    eu-west-2:
      AMZNLINUXHVM: ami-0596aab74a1ce3983
    eu-west-3:
      AMZNLINUXHVM: ami-06cba15121418cdcb
    sa-east-1:
      AMZNLINUXHVM: ami-03e1e4abf50e14ded
    us-east-1:
      AMZNLINUXHVM: ami-0915e09cc7ceee3ab
    us-gov-west-1:
      AMZNLINUXHVM: ami-f5e4d294
    us-gov-east-1:
      AMZNLINUXHVM: ami-51ef0320
    us-east-2:
      AMZNLINUXHVM: ami-097834fcb3081f51a
    us-west-1:
      AMZNLINUXHVM: ami-0027eed75be6f3bf4
    us-west-2:
      AMZNLINUXHVM: ami-01f08ef3e76b957e5
    cn-north-1:
      AMZNLINUXHVM: ami-04b1196830276cd1f
    cn-northwest-1:
      AMZNLINUXHVM: ami-0bae393f70322bed6
      
  LinuxAMINameMap:
    Amazon-Linux-HVM:
      Code: AMZNLINUXHVM
      
Conditions:
      
  UseAlternativeInitialization: !Not 
    - !Equals 
      - !Ref AltInitScript
      - ''
      
  UseOSImageOverride: !Not 
    - !Equals 
      - !Ref OSImageOverride
      - ''
      
  DefaultBanner: !Equals [!Ref BastionBanner, 'default']    
  
Resources:
  
  EC2SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref NotificationList
        Protocol: email
        
  BastionMainLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays
    
  SSHMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName: !Ref BastionMainLogGroup
      FilterPattern: ON FROM USER PWD
      MetricTransformations:
        - MetricName: SSHCommandCount
          MetricValue: 1
          MetricNamespace: !Join 
            - /
            - - AWSQuickStart
              - !Ref 'AWS::StackName'

  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: 
        'Fn::ImportValue': !Sub '${EnvironmentName}:VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref RemoteAccessCIDR
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: !Ref RemoteAccessCIDR
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-BastionSecurityGroup'          
                          
  BastionHostRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:${AWS::Partition}:s3:::aws-quickstart-${AWS::Region}/quickstart-linux-bastion/*'
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:GetLogEvents'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutRetentionPolicy'
                  - 'logs:PutMetricFilter'
                  - 'logs:CreateLogGroup'
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${BastionMainLogGroup}:*"
                Effect: Allow
          PolicyName: bastion-cloudwatch-logs-policy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'ec2:AssociateAddress'
                  - 'ec2:DescribeAddresses'
                Resource:
                  - '*'
                Effect: Allow
          PolicyName: bastion-eip-policy
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - !Sub 'ec2.${AWS::URLSuffix}'
            Effect: Allow
        Version: 2012-10-17
        
  BastionHostProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref BastionHostRole
      Path: /
      
  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      
  BastionAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity: '1'
      LaunchConfigurationName: !Ref BastionLaunchConfiguration
      MaxSize: '1'
      MinSize: '1'
      # Tags:
      # - Key: Name
      #   Value: !Sub '${AWS::StackName}-BastionHost-${CidrBlock}'
      #   - CidrBlock:  10.0.0.24/0
      #   # - CidrBlock: {'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'}
      # PropagateAtLaunch: true
      NotificationConfigurations:
      - TopicARN: !Ref EC2SNSTopic
        NotificationTypes:
        - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
        - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
      VPCZoneIdentifier: 
        - {'Fn::ImportValue': !Sub '${EnvironmentName}:PublicSubnetOne'}
        - {'Fn::ImportValue': !Sub '${EnvironmentName}:PublicSubnetTwo'}
        - {'Fn::ImportValue': !Sub '${EnvironmentName}:PublicSubnetThree'}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT10M
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions
        WaitOnResourceSignals: true        
        
  BastionLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          roleName: !Ref BastionHostRole
          buckets:
            - !Sub 'aws-quickstart-${AWS::Region}'
      'AWS::CloudFormation::Init':
        config:
          files:
            /tmp/bastion_bootstrap.sh:
              source: !If 
                - UseAlternativeInitialization
                - !Ref AltInitScript
                - !Sub 'https://aws-quickstart-${AWS::Region}.s3.${AWS::Region}.${AWS::URLSuffix}/quickstart-linux-bastion/scripts/bastion_bootstrap.sh'
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /home/ec2-user/.psqlrc: 
              content: !Sub | 
                \set PROMPT1 '%[%033[1;31m%]%M%[%033[0m%]:%> %[%033[1;33m%]%n%[%033[0m%]@%/%R%#%x '
                \pset pager off
                \set COMP_KEYWORD_CASE upper
                \set VERBOSITY verbose
                \set HISTCONTROL ignorespace
                \set HISTFILE ~/.psql_history- :DBNAME
                \set HISTSIZE 5000
                \set version 'SELECT version();'
                \set extensions 'select * from pg_available_extensions;'
              mode: "000644"
              owner: "root"
              group: "root"            
          commands:
            b-bootstrap:
              cwd: '/tmp/'
              command: !Sub 
                - "REGION=${AWS::Region} URL_SUFFIX=${AWS::URLSuffix} BANNER_REGION=${AWS::Region} ./bastion_bootstrap.sh --banner ${BannerUrl} --enable ${EnableBanner} --tcp-forwarding ${EnableTCPForwarding} --x11-forwarding ${EnableX11Forwarding}"
                - BannerUrl: !If
                    - DefaultBanner
                    - !Sub 's3://aws-quickstart-${AWS::Region}/quickstart-linux-bastion/scripts/banner_message.txt'
                    - !Ref BastionBanner
            c-restartsshd:
              command: /etc/init.d/sshd restart
            d-yumupdate:
              command: yum update -y
    Properties:
      AssociatePublicIpAddress: 'true'
      PlacementTenancy: !Ref BastionTenancy
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref BastionHostProfile
      ImageId: !If 
        - UseOSImageOverride
        - !Ref OSImageOverride
        - !FindInMap 
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - !FindInMap 
            - LinuxAMINameMap
            - 'Amazon-Linux-HVM'
            - Code
      SecurityGroups:
        - !Ref BastionSecurityGroup
      InstanceType: !Ref BastionInstanceType
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              set -x
            - |
              export PATH=$PATH:/usr/local/bin
            - |
              which pip &> /dev/null
            - |
              if [ $? -ne 0 ] ; then
            - |2
                  echo "PIP NOT INSTALLED"
            - |2
                  [ `which yum` ] && $(yum install -y epel-release; yum install -y python-pip) && echo "PIP INSTALLED"
            - |2
                  [ `which apt-get` ] && apt-get -y update && apt-get -y install python-pip && echo "PIP INSTALLED"
            - |
              fi
            - |
              pip install --upgrade pip &> /dev/null
            - |
              pip install awscli --ignore-installed six &> /dev/null
            - >
              easy_install
              https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            - |
              yum install -y postgresql96 &> /dev/null
            - EIP_LIST="
            - !Ref EIP
            - |
              "
            - CLOUDWATCHGROUP=
            - !Ref BastionMainLogGroup
            - |+

            - 'cfn-init -v --stack '
            - !Ref 'AWS::StackName'
            - ' --resource BastionLaunchConfiguration --region '
            - !Ref 'AWS::Region'
            - |+

            - 'cfn-signal -e $? --stack '
            - !Ref 'AWS::StackName'
            - ' --resource BastionAutoScalingGroup --region '
            - !Ref 'AWS::Region'
            - |+  

  CPUTooHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EC2'
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
      - Ref: EC2SNSTopic
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref BastionAutoScalingGroup

Outputs:
  TemplateID:
    Description: 'Template ID'
    Value: 'VPC-SSH-Bastion'
    
  # BastionAutoScalingGroup:
  #   Description: Auto Scaling Group Reference ID
  #   Value: !Ref BastionAutoScalingGroup
  #   Export:
  #     Name: !Sub '${AWS::StackName}-BastionAutoScalingGroup'
      
  EIP:
    Description: The public IP address of the SSH bastion host/instance
    Value: !Ref EIP
    Export:
      Name: !Sub '${AWS::StackName}-EIP'
      
  SSHCommand:      
    Description: SSH command line
    Value: !Join
             - ''
             - - 'ssh -i "'
               - !Ref KeyPairName
               - '.pem" '
               - 'ec2-user@'
               - !Ref EIP
    
  CloudWatchLogs:
    Description: CloudWatch Logs GroupName. Your SSH logs will be stored here.
    Value: !Ref BastionMainLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-CloudWatchLogs'
      
  BastionSecurityGroupID:
    Description: Use this Security Group to reference incoming traffic from the SSH bastion host/instance
    Value: !Ref BastionSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-BastionSecurityGroupID'